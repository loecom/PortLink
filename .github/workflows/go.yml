name: Go Cross-Platform Build

on: [push, pull_request]

env:
  GO_VERSION: "1.21"  # 使用稳定版本
  PROJECT_NAME: "PortLink"  # 必须与go.mod中的模块名一致
  OUTPUT_DIR: "dist"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 防止长时间运行被取消
    strategy:
      fail-fast: false  # 防止一个失败导致全部取消
      matrix:
        platform:
          - { os: linux, arch: amd64 }
          - { os: linux, arch: arm64 }
          - { os: windows, arch: amd64, ext: ".exe" }

    steps:
      - uses: actions/checkout@v4

      - name: Verify go.mod
        run: test -f go.mod || (echo "❌ go.mod file missing" && exit 1)

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare output
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: Build
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
          CGO_ENABLED: 0
        run: |
          EXT="${matrix.platform.ext:-}"  # 处理没有ext定义的情况
          OUTPUT="${{ env.PROJECT_NAME }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${EXT}"
          
          echo "▶️ Building $OUTPUT"
          go build -v -o "${{ env.OUTPUT_DIR }}/$OUTPUT" ./...
          
          # 生成校验和
          (cd ${{ env.OUTPUT_DIR }} && \
           sha256sum "$OUTPUT" > "$OUTPUT.sha256")

      - name: Upload artifacts
        uses: actions/upload-artifact@v4  # 必须使用v4版本
        with:
          name: ${{ matrix.platform.os }}-${{ matrix.platform.arch }}-binary
          path: |
            ${{ env.OUTPUT_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}*
          if-no-files-found: error
          retention-days: 3
