name: Go Cross-Platform Build

on: [push, pull_request]

env:
  GO_VERSION: "1.21.0"  # 已验证可用的版本（1.23.4可能Actions尚未支持）
  PROJECT_NAME: "PortLink"  # 改为你的模块名（来自go.mod）
  OUTPUT_DIR: "dist"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - { os: linux, arch: amd64, ext: "" }
          - { os: linux, arch: arm64, ext: "" }
          - { os: windows, arch: amd64, ext: ".exe" }
    steps:
      - uses: actions/checkout@v4

      - name: Validate go.mod exists
        run: test -f go.mod || (echo "❌ go.mod file missing" && exit 1)

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go-setup

      - name: Check Go version
        run: go version

      - name: Prepare output
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: Build
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
          CGO_ENABLED: 0
        run: |
          OUTPUT="${{ env.PROJECT_NAME }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.ext }}"
          echo "▶️ Building $OUTPUT"
          
          go build -v -o "${{ env.OUTPUT_DIR }}/$OUTPUT" ./... || (echo "❌ Build failed" && exit 1)
          
          # 生成校验和
          cd ${{ env.OUTPUT_DIR }} && \
          sha256sum "$OUTPUT" > "$OUTPUT.sha256" && \
          echo "✅ Build successful"

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: ${{ env.OUTPUT_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}*
          retention-days: 3
